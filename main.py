import time
from confic import bot, dp
from aiogram import executor, types
from keyboard import main_keyboard, select_tech_keyboard, add_korzina, otbor_tovara
from keyboard import delete_korzina, swipe_news, kb_add_target_pay, api_pay
from aiogram.utils.markdown import hbold, hlink
from aiogram.dispatcher.filters import Text
from Scraping.Videocard.videocard import videocard
from Scraping.GameLaptop.game_laptop import game_laptop
import json
from aiogram.dispatcher import FSMContext
from state_machine import State_Otbor
from aiogram.types import ReplyKeyboardRemove
from sqlite import bd_conect, add_korzina_to_db, get_id, delete_korzina_to_db, get_pay_target
from sqlite import create_target_pay, delete_target_pay, update_user_sum
from ScrapingNews.scraping_news import get_news
from pay import order

async def info_start(_):
    print("–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

@dp.message_handler(Text(equals=["/start", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüö∂üèº"]))
async def cmd_start(message: types.Message):
    await message.delete()
    await bd_conect(message.from_user.id)
    await bot.send_photo(chat_id=message.from_user.id,
                         photo="https://b1.filmpro.ru/c/43526.jpg",
                            caption="<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –í–∞–ª–µ—Ä—É!</b>",
                           parse_mode="HTML",
                           reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µüîÑ"))
async def cmd_update_scrap(message: types.Message):
    await message.reply(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...", reply_markup=ReplyKeyboardRemove())
    videocard()
    game_laptop()

    with open("Scraping//GameLaptop//result.json", encoding="utf-8") as file:
        data1 = json.load(file)

    with open("Scraping//Videocard//result.json", encoding="utf-8") as file:
        data2 = json.load(file)

    union = data1 + data2

    with open("SQL//ebaty.json", "w", encoding="utf-8") as file:
        json.dump(union, file, indent=4, ensure_ascii=False)

    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Äüíª"))
async def cmd_select_tech(message: types.Message):
    await message.reply(text="<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏</i>",
                        reply_markup=select_tech_keyboard(),
                        parse_mode="HTML")

name_search = ""

@dp.message_handler(Text(equals=["–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ—É—Ç–±—É–∫–∏"]))
async def cmd_get_videocard(message: types.Message):
    global name_search
    name_search = ""
    name_search += message.text

    await message.reply(text="<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä</i>", reply_markup=otbor_tovara(),
                        parse_mode="HTML")

@dp.message_handler(Text(equals="1Ô∏è‚É£–ü–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–æ–∑–æ–Ω—É"))
async def cmd_otbor_1(message: types.Message):
    await message.reply(text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: 15000 20000\n–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ "
                             "–∫–∞–∫–∏–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ã", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.category_price.set()

@dp.message_handler(Text(equals="2Ô∏è‚É£–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É"))
async def cmd_otbor_1(message: types.Message):
    await message.reply(text="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –º—ã –ø–æ –Ω–µ–º—É –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
                             "–ü—Ä–∏–º–µ—Ä: Asus 16 –ì–ë", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.search_text.set()

@dp.message_handler(state=State_Otbor.search_text)
async def cmd_state_search_text(message: types.Message, state: FSMContext):
    global name_search
    pizda_bobra = {
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "Videocard",
        "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ—É—Ç–±—É–∫–∏": "GameLaptop"
    }
    try:
        await state.update_data(search_text=message.text)

        data = await state.get_data()

        search_tovar = data["search_text"].split()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        with open(f"Scraping//{pizda_bobra[name_search]}//result.json", encoding="utf-8") as file:
            data = json.load(file)

        for index, item in enumerate(data):
            pisa = item.get("–°—Ç–æ–∏–º–æ—Å—Ç—å")
            if all(word.lower() in item["–û–ø–∏—Å–∞–Ω–∏–µ"].lower() for word in search_tovar):
                card = (f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                        f"{hbold('Id: ')}{item.get('Id')}\n"
                        f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{item.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                        f"{hbold('–¶–µ–Ω–∞: ')}{item.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                        f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{item.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                        f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

                if index % 20 == 0:
                    time.sleep(5)

                await message.answer(card, parse_mode="HTML", reply_markup=add_korzina())

        await message.answer("–í–æ—Ç, –≤—Å–µ —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å", reply_markup=main_keyboard())
        await state.finish()
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üò¢")

@dp.message_handler(state=State_Otbor.category_price)
async def cmd_state_category(message: types.Message, state: FSMContext):
    global name_search
    pizda_bobra = {
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "Videocard",
        "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ—É—Ç–±—É–∫–∏": "GameLaptop"
    }
    try:
        await state.update_data(category_price=message.text)

        data = await state.get_data()

        put_user1, put_user2 = data["category_price"].split()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        with open(f"Scraping//{pizda_bobra[name_search]}//result.json", encoding="utf-8") as file:
            data = json.load(file)

        for index, item in enumerate(data):
            pisa = item.get("–°—Ç–æ–∏–º–æ—Å—Ç—å")
            if pisa >= int(put_user1) and pisa <= int(put_user2):
                card = (f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                        f"{hbold('Id: ')}{item.get('Id')}\n"
                        f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{item.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                        f"{hbold('–¶–µ–Ω–∞: ')}{item.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                        f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{item.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                        f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

                if index % 20 == 0:
                    time.sleep(5)

                await message.answer(card, parse_mode="HTML", reply_markup=add_korzina())

        await message.answer("–í–æ—Ç, –≤—Å–µ —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å", reply_markup=main_keyboard())
        await state.finish()
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üò¢")

@dp.callback_query_handler(text="add_korzina_push")
async def cmd_add_korzina(callback: types.CallbackQuery):
    index_id = callback.message.text.split().index("Id:") + 1
    id_tovar = callback.message.text.split()[index_id]
    result = await add_korzina_to_db(callback.message.chat.id, id_tovar)
    await callback.answer(result)

@dp.callback_query_handler(text="delete_korzina_push")
async def cmd_delete_korzina(callback: types.CallbackQuery):
    index_id = callback.message.text.split().index("Id:") + 1
    id_tovar = callback.message.text.split()[index_id]
    await delete_korzina_to_db(callback.message.chat.id, id_tovar)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    await callback.message.delete()

@dp.message_handler(Text(equals="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞üóë"))
async def cmd_korzina(message: types.Message):
    id_tovar = await get_id(message.from_user.id)

    with open("SQL//ebaty.json", encoding="utf-8") as file:
        fuck = json.load(file)

    count_tovar = 0
    count_price = 0

    for item in fuck:
        for i in id_tovar:
            if item["Id"] == i:
                card = (f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                        f"{hbold('Id: ')}{item.get('Id')}\n"
                        f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{item.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                        f"{hbold('–¶–µ–Ω–∞: ')}{item.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                        f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{item.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                        f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

                await message.answer(card, parse_mode="HTML", reply_markup=delete_korzina())
                count_tovar += 1
                count_price += item["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

    await message.answer(f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ {count_tovar} —Ç–æ–≤–∞—Ä–∞\n–ù–∞ —Å—É–º–º—É {count_price}—Ä—É–±")

count_news = 0

@dp.callback_query_handler(text="swipe_one")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    try:
        with open("ScrapingNews//news.json", encoding="utf-8") as file:
            news_js = json.load(file)

        count_news = 0

        card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="swipe_last")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    try:
        with open("ScrapingNews//news.json", encoding="utf-8") as file:
            news_js = json.load(file)

        count_news = 29

        card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="forward")
async def cmd_news_forward(callback: types.CallbackQuery):
    try:
        global count_news
        if count_news >= 29:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_news += 1

            with open("ScrapingNews//news.json", encoding="utf-8") as file:
                news_js = json.load(file)

            card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                    f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                    f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                    f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        pass

@dp.callback_query_handler(text="back")
async def cmd_news_forward(callback: types.CallbackQuery):
    try:
        global count_news
        if count_news <= 0:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_news -= 1

            with open("ScrapingNews//news.json", encoding="utf-8") as file:
                news_js = json.load(file)

            card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                    f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                    f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                    f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        pass

@dp.callback_query_handler(text="reset")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    await callback.message.edit_text("–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await get_news()
    count_news = 0

    with open("ScrapingNews//news.json", encoding="utf-8") as file:
        news_js = json.load(file)

    card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
            f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
            f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
            f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

    await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())

@dp.callback_query_handler(text="close_news")
async def cmd_close_news(callback: types.CallbackQuery):
    await callback.message.delete()

@dp.message_handler(Text(equals="–ù–æ–≤–æ—Å—Ç–∏ –æ–± –º–∏—Ä–µ —Ç–µ—Ö–Ω–∏–∫–µüì∞"))
async def cmd_get_news(message: types.Message):
    global count_news

    with open("ScrapingNews//news.json", encoding="utf-8") as file:
        news_js = json.load(file)

    card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
            f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
            f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
            f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

    await message.answer(card, parse_mode="HTML", reply_markup=swipe_news())

@dp.callback_query_handler(text="create_target_pay")
async def cmd_create_target_pay(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text="–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –≤–∞—à–µ–π —Ü–µ–ª–∏?", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.name_target.set()

@dp.message_handler(state=State_Otbor.name_target)
async def state_name_target(message: types.Message, state: FSMContext):
    await state.update_data(name_target=message.text)
    await message.reply(text="–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å?")
    await State_Otbor.sum_target.set()

@dp.message_handler(state=State_Otbor.sum_target)
async def cmd_sum_target(message: types.Message, state: FSMContext):
    fun = lambda num: str(num).isdigit()
    if fun(message.text) is True and message.text[0] != "0":
        await state.update_data(sum_target=message.text)
        result_data = await state.get_data()
        await create_target_pay(message.from_user.id, result_data['name_target'], result_data['sum_target'])
        await state.finish()
        await message.reply("–í–∞—à–∞ —Ü–µ–ª—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏",
                                reply_markup=main_keyboard())
    else:
        await message.reply(text="–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

@dp.callback_query_handler(text="delete_target")
async def cmd_delete_target_pay(callback: types.CallbackQuery):
    target = " ".join(callback.message.text.split()[1:callback.message.text.split().index("–°—É–º–º–∞:")])
    ind = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1]
    sum = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1][0:ind.index("—Ä")]
    await delete_target_pay(callback.message.chat.id, target, sum)
    await callback.answer("–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!")
    await callback.message.delete()

user_target = ""
user_sum = ""

@dp.callback_query_handler(text="Popolnity")
async def cmd_popolnity_pay(callback: types.CallbackQuery):
    global user_target, user_sum
    user_target = ""
    user_sum = ""

    target = " ".join(callback.message.text.split()[1:callback.message.text.split().index("–°—É–º–º–∞:")])
    ind = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1]
    sum = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1][0:ind.index("—Ä")]

    user_target += target
    user_sum += sum

    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.price_pay.set()

@dp.message_handler(state=State_Otbor.price_pay)
async def state_price_pay(message: types.Message, state: FSMContext):
    fun = lambda num: str(num).isdigit()
    if fun(message.text) is True and message.text[0] != "0":
        await state.update_data(price_pay=message.text)
        result = await state.get_data()
        await order(message.chat.id, bot, int(result['price_pay']))
        await state.finish()
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(checkout.id, ok=True)

# Handler –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ–π
@dp.message_handler(content_types=[types.ContentType.SUCCESSFUL_PAYMENT])
async def successful_payment(message: types.Message):
    msg = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π —Å—á—ë—Ç!\n–ù–∞ —Å—É–º–º—É: {message.successful_payment.total_amount // 100}—Ä—É–±"
    await update_user_sum(message.from_user.id, user_target, int(message.successful_payment.total_amount // 100))

    await message.answer(msg, reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏üí≥"))
async def cmd_pay(message: types.Message):
    count_sum = 0
    result = await get_pay_target(message.from_user.id)
    if result is False:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω—ã—Ö —Ü–µ–ª–µ–π", reply_markup=kb_add_target_pay())
    else:
        for i in result:
            name, summ, price_user = i
            count_sum += summ
            await message.answer(f"–¶–µ–ª—å: {name}\n–°—É–º–º–∞: {price_user}/{summ}—Ä—É–±\n–û—Å—Ç–∞–ª–æ—Å—å: {summ - price_user}—Ä—É–±",
                                 reply_markup=api_pay())
        await message.answer(f"–û–±—â–∞—è —Å—É–º–º–∞: {count_sum}—Ä—É–±")
        await message.reply("–í–æ—Ç –≤–∞—à–∏ —Ü–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ", reply_markup=kb_add_target_pay())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=info_start)