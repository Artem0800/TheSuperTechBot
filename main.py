import time
from confic import bot, dp
from aiogram import executor, types
from keyboard import main_keyboard, add_korzina, otbor_tovara
from keyboard import delete_korzina, swipe_news, kb_add_target_pay, api_pay, detali_pc
from keyboard import ai_kb, ai_kb_pros, swipe_ai
from aiogram.utils.markdown import hbold, hlink
from aiogram.dispatcher.filters import Text
from Scraping.–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.parce import videocard
from Scraping.–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã.parce import procces
from Scraping.–ë–ª–æ–∫–ü–∏—Ç–∞–Ω–∏—è.parce import block_energy
from Scraping.–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ–ü–ª–∞—Ç—ã.parce import mother_plata
from Scraping.–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è–ü–∞–º—è—Ç—å.parce import memory_oper
from Scraping.–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD25.parce import hd25
from Scraping.–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD35.parce import hd35
from Scraping.–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏SSD.parce import sdd
from Scraping.–ö–æ—Ä–ø—É—Å–∞.parce import korpus
from Scraping.–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–ñ–∏—Ç–∫–æ–µ.parce import wsh
from Scraping.–ö—É–ª–µ—Ä—ã–î–ª—è–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤.parce import kprs
from Scraping.–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–î–ª—è–ö–æ—Ä–ø—É—Å–∞.parce import vk
import json
from aiogram.dispatcher import FSMContext
from state_machine import State_Otbor
from aiogram.types import ReplyKeyboardRemove
from sqlite import bd_conect, add_korzina_to_db, get_id, delete_korzina_to_db, get_pay_target
from sqlite import create_target_pay, delete_target_pay, update_user_sum
from ScrapingNews.scraping_news import get_news
from pay import order
from filter_user import filter_products
from AI.gpt import get_res_ai

async def info_start(_):
    print("–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

@dp.message_handler(Text(equals=["/start", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüö∂üèº"]))
async def cmd_start(message: types.Message):
    await message.delete()
    await bd_conect(message.from_user.id)
    await bot.send_photo(chat_id=message.from_user.id,
                         photo="https://b1.filmpro.ru/c/43526.jpg",
                            caption="<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –í–∞–ª–µ—Ä—É!</b>",
                           parse_mode="HTML",
                           reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µüîÑ"))
async def cmd_update_scrap(message: types.Message):
    await message.reply(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...", reply_markup=ReplyKeyboardRemove())

    block_energy(),
    vk(),
    kprs(),
    wsh(),
    hd35(),
    time.sleep(3)
    hd25(),
    sdd(),
    videocard(),
    procces(),
    time.sleep(3)
    mother_plata(),
    memory_oper(),
    korpus()

    with open("Scraping//–ö–æ—Ä–ø—É—Å–∞//result.json", encoding="utf-8") as file:
        data1 = json.load(file)

    with open("Scraping//–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è–ü–∞–º—è—Ç—å//result.json", encoding="utf-8") as file:
        data2 = json.load(file)

    with open("Scraping//–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ–ü–ª–∞—Ç—ã//result.json", encoding="utf-8") as file:
        data3 = json.load(file)

    with open("Scraping//–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã//result.json", encoding="utf-8") as file:
        data4 = json.load(file)

    with open("Scraping//–ë–ª–æ–∫–ü–∏—Ç–∞–Ω–∏—è//result.json", encoding="utf-8") as file:
        data5 = json.load(file)

    with open("Scraping//–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏SSD//result.json", encoding="utf-8") as file:
        data6 = json.load(file)

    with open("Scraping//–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD25//result.json", encoding="utf-8") as file:
        data7 = json.load(file)

    with open("Scraping//–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD35//result.json", encoding="utf-8") as file:
        data8 = json.load(file)

    with open("Scraping//–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã//result.json", encoding="utf-8") as file:
        data9 = json.load(file)

    with open("Scraping//–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–ñ–∏—Ç–∫–æ–µ//result.json", encoding="utf-8") as file:
        data10 = json.load(file)

    with open("Scraping//–ö—É–ª–µ—Ä—ã–î–ª—è–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤//result.json", encoding="utf-8") as file:
        data11 = json.load(file)

    with open("Scraping//–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–î–ª—è–ö–æ—Ä–ø—É—Å–∞//result.json", encoding="utf-8") as file:
        data12 = json.load(file)

    union = data1 + data2 + data3 + data4 + data5 + data6 + data7 + data8 + data9 + data10 + data11 + data12

    with open("SQL//ebaty.json", "w", encoding="utf-8") as file:
        json.dump(union, file, indent=4, ensure_ascii=False)

    with open("SQL//ebaty.json", encoding="utf-8") as file:
        huba = json.load(file)

    with open("AI//data.txt", "w", encoding="utf-8") as file:
        for i in huba:
            file.write(
                f"Id: {i['Id']} {i['–ù–∞–∑–≤–∞–Ω–∏–µ']} - {i['–°—Ç–æ–∏–º–æ—Å—Ç—å']}\n"
            )

    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–°–æ–±—Ä–∞—Ç—å –ü–öüñ•"))
async def cmd_detal_PC(message: types.Message):
    await message.reply("<i>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π</i>\n1)–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã\n2)–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã\n3)–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n"
                        "4)–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å\n5)–ö–æ—Ä–ø—É—Å–∞\n6)–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è\n7)–ñ–∏—Ç–∫–æ—Å—Ç–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ\n8)–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤\n"
                        "9)–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ—Ä–ø—É—Å–∞\n10)–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏ SSD\n11)–ñ–µ—Å—Ç–∫–∏–µ –î–∏—Å–∫–∏ HDD 3.5\n12)–ñ–µ—Å—Ç–∫–∏–µ –î–∏—Å–∫–∏ HDD 2.5\n"
                        
                        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –¥–µ—Ç–∞–ª—å –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                        reply_markup=detali_pc(),
                        parse_mode="HTML")

name_search = ""

@dp.message_handler(Text(equals=["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£","9Ô∏è‚É£","1Ô∏è‚É£0Ô∏è‚É£","1Ô∏è‚É£1Ô∏è‚É£","1Ô∏è‚É£2Ô∏è‚É£" "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ—É—Ç–±—É–∫–∏"]))
async def cmd_get_videocard(message: types.Message):
    global name_search
    name_search = ""
    if message.text == "1Ô∏è‚É£":
        message.text = "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"
    elif message.text == "2Ô∏è‚É£":
        message.text = "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ–ü–ª–∞—Ç—ã"
    elif message.text == "3Ô∏è‚É£":
        message.text = "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"
    elif message.text == "4Ô∏è‚É£":
        message.text = "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è–ü–∞–º—è—Ç—å"
    elif message.text == "5Ô∏è‚É£":
        message.text = "–ö–æ—Ä–ø—É—Å–∞"
    elif message.text == "6Ô∏è‚É£":
        message.text = "–ë–ª–æ–∫–ü–∏—Ç–∞–Ω–∏—è"
    elif message.text == "7Ô∏è‚É£":
        message.text = "–ñ–∏—Ç–∫–æ—Å—Ç–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"
    elif message.text == "8Ô∏è‚É£":
        message.text = "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"
    elif message.text == "9Ô∏è‚É£":
        message.text = "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ—Ä–ø—É—Å–∞"
    elif message.text == "1Ô∏è‚É£0Ô∏è‚É£":
        message.text = "–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏SSD"
    elif message.text == "1Ô∏è‚É£1Ô∏è‚É£":
        message.text = "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD3.5"
    elif message.text == "1Ô∏è‚É£2Ô∏è‚É£":
        message.text = "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD2.5"

    name_search += message.text

    await message.reply(text="<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã</i>", reply_markup=otbor_tovara(),
                        parse_mode="HTML")

@dp.message_handler(content_types=["web_app_data"])
async def cmd_get_tovar(message: types.Message):
    global name_search
    filter_user = json.loads(message.web_app_data.data)

    pizda_bobra = {
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
        "–ö–æ—Ä–ø—É—Å–∞": "–ö–æ—Ä–ø—É—Å–∞",
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã",
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è–ü–∞–º—è—Ç—å": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è–ü–∞–º—è—Ç—å",
        "–ë–ª–æ–∫–ü–∏—Ç–∞–Ω–∏—è": "–ë–ª–æ–∫–ü–∏—Ç–∞–Ω–∏—è",
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ–ü–ª–∞—Ç—ã": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ–ü–ª–∞—Ç—ã",
        "–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏SSD": "–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏SSD",
        "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD3.5": "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD35",
        "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD2.5": "–ñ–µ—Å—Ç–∫–∏–µ–î–∏—Å–∫–∏HDD25",
        "–ñ–∏—Ç–∫–æ—Å—Ç–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ": "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–ñ–∏—Ç–∫–æ–µ",
        "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤": "–ö—É–ª–µ—Ä—ã–î–ª—è–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
        "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ—Ä–ø—É—Å–∞": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–î–ª—è–ö–æ—Ä–ø—É—Å–∞"
    }

    try:
        with open(f"Scraping//{pizda_bobra[name_search]}//result.json", encoding="utf-8") as file:
            data = json.load(file)

        get_result = await filter_products(data, filter_user)

        result_otbor = []

        for i in get_result:
            result_otbor.append(i)

        for index, item in enumerate(result_otbor):
            card = (f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                    f"{hbold('Id: ')}{item.get('Id')}\n"
                    f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{item.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                    f"{hbold('–¶–µ–Ω–∞: ')}{item.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                    f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{item.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                    f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

            if index % 20 == 0:
                time.sleep(5)

            await message.answer(card, parse_mode="HTML", reply_markup=add_korzina())

        await message.answer("–í–æ—Ç, –≤—Å–µ —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å", reply_markup=main_keyboard())
    except Exception as ex:
        print(ex)
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üò¢")

@dp.callback_query_handler(text="add_korzina_push")
async def cmd_add_korzina(callback: types.CallbackQuery):
    index_id = callback.message.text.split().index("Id:") + 1
    id_tovar = callback.message.text.split()[index_id]
    result = await add_korzina_to_db(callback.message.chat.id, id_tovar)
    await callback.answer(result)

@dp.callback_query_handler(text="delete_korzina_push")
async def cmd_delete_korzina(callback: types.CallbackQuery):
    index_id = callback.message.text.split().index("Id:") + 1
    id_tovar = callback.message.text.split()[index_id]
    await delete_korzina_to_db(callback.message.chat.id, id_tovar)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    await callback.message.delete()

@dp.message_handler(Text(equals="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞üóë"))
async def cmd_korzina(message: types.Message):
    id_tovar = await get_id(message.from_user.id)

    with open("SQL//ebaty.json", encoding="utf-8") as file:
        fuck = json.load(file)

    count_tovar = 0
    count_price = 0

    for item in fuck:
        for i in id_tovar:
            if item["Id"] == i:
                card = (f"{hlink(item.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), item.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                        f"{hbold('Id: ')}{item.get('Id')}\n"
                        f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{item.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                        f"{hbold('–¶–µ–Ω–∞: ')}{item.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                        f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{item.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                        f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

                await message.answer(card, parse_mode="HTML", reply_markup=delete_korzina())
                count_tovar += 1
                count_price += item["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

    await message.answer(f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ {count_tovar} —Ç–æ–≤–∞—Ä–∞\n–ù–∞ —Å—É–º–º—É {count_price}—Ä—É–±")

count_news = 0

@dp.callback_query_handler(text="swipe_one")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    try:
        with open("ScrapingNews//news.json", encoding="utf-8") as file:
            news_js = json.load(file)

        count_news = 0

        card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="swipe_last")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    try:
        with open("ScrapingNews//news.json", encoding="utf-8") as file:
            news_js = json.load(file)

        count_news = 29

        card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="forward")
async def cmd_news_forward(callback: types.CallbackQuery):
    try:
        global count_news
        if count_news >= 29:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_news += 1

            with open("ScrapingNews//news.json", encoding="utf-8") as file:
                news_js = json.load(file)

            card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                    f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                    f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                    f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        pass

@dp.callback_query_handler(text="back")
async def cmd_news_forward(callback: types.CallbackQuery):
    try:
        global count_news
        if count_news <= 0:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_news -= 1

            with open("ScrapingNews//news.json", encoding="utf-8") as file:
                news_js = json.load(file)

            card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
                    f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
                    f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
                    f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())
    except:
        pass

@dp.callback_query_handler(text="reset")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_news
    await callback.message.edit_text("–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    get_news()
    count_news = 0

    with open("ScrapingNews//news.json", encoding="utf-8") as file:
        news_js = json.load(file)

    card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
            f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
            f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
            f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

    await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_news())

@dp.callback_query_handler(text="close_news")
async def cmd_close_news(callback: types.CallbackQuery):
    await callback.message.delete()

@dp.message_handler(Text(equals="–ù–æ–≤–æ—Å—Ç–∏ –æ–± –º–∏—Ä–µ —Ç–µ—Ö–Ω–∏–∫–µüì∞"))
async def cmd_get_news(message: types.Message):
    global count_news

    with open("ScrapingNews//news.json", encoding="utf-8") as file:
        news_js = json.load(file)

    card = (f"{hlink(news_js[count_news].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), news_js[count_news].get('–°—Å—ã–ª–∫–∞'))}\n"
            f"{hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ')}{news_js[count_news].get('–î–∞—Ç–∞')}\n"
            f"{news_js[count_news].get('–¢–µ–∫—Å—Ç')}\n"
            f"{hbold(f'{count_news + 1}/{len(news_js)}')}")

    await message.answer(card, parse_mode="HTML", reply_markup=swipe_news())

@dp.callback_query_handler(text="create_target_pay")
async def cmd_create_target_pay(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text="–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –≤–∞—à–µ–π —Ü–µ–ª–∏?", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.name_target.set()

@dp.message_handler(state=State_Otbor.name_target)
async def state_name_target(message: types.Message, state: FSMContext):
    await state.update_data(name_target=message.text)
    await message.reply(text="–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å?")
    await State_Otbor.sum_target.set()

@dp.message_handler(state=State_Otbor.sum_target)
async def cmd_sum_target(message: types.Message, state: FSMContext):
    fun = lambda num: str(num).isdigit()
    if fun(message.text) is True and message.text[0] != "0":
        await state.update_data(sum_target=message.text)
        result_data = await state.get_data()
        await create_target_pay(message.from_user.id, result_data['name_target'], result_data['sum_target'])
        await state.finish()
        await message.reply("–í–∞—à–∞ —Ü–µ–ª—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏",
                                reply_markup=main_keyboard())
    else:
        await message.reply(text="–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

@dp.callback_query_handler(text="delete_target")
async def cmd_delete_target_pay(callback: types.CallbackQuery):
    target = " ".join(callback.message.text.split()[1:callback.message.text.split().index("–°—É–º–º–∞:")])
    ind = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1]
    sum = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1][0:ind.index("—Ä")]
    await delete_target_pay(callback.message.chat.id, target, sum)
    await callback.answer("–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!")
    await callback.message.delete()

user_target = ""
user_sum = ""

@dp.callback_query_handler(text="Popolnity")
async def cmd_popolnity_pay(callback: types.CallbackQuery):
    global user_target, user_sum
    user_target = ""
    user_sum = ""

    target = " ".join(callback.message.text.split()[1:callback.message.text.split().index("–°—É–º–º–∞:")])
    ind = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1]
    sum = callback.message.text.split()[callback.message.text.split().index("–°—É–º–º–∞:") + 1].split("/")[1][0:ind.index("—Ä")]

    user_target += target
    user_sum += sum

    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å", reply_markup=ReplyKeyboardRemove())
    await State_Otbor.price_pay.set()

@dp.message_handler(state=State_Otbor.price_pay)
async def state_price_pay(message: types.Message, state: FSMContext):
    fun = lambda num: str(num).isdigit()
    if fun(message.text) is True and message.text[0] != "0":
        await state.update_data(price_pay=message.text)
        result = await state.get_data()
        await order(message.chat.id, bot, int(result['price_pay']))
        await state.finish()
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(checkout.id, ok=True)

# Handler –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ–π
@dp.message_handler(content_types=[types.ContentType.SUCCESSFUL_PAYMENT])
async def successful_payment(message: types.Message):
    msg = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π —Å—á—ë—Ç!\n–ù–∞ —Å—É–º–º—É: {message.successful_payment.total_amount // 100}—Ä—É–±"
    await update_user_sum(message.from_user.id, user_target, int(message.successful_payment.total_amount // 100))

    await message.answer(msg, reply_markup=main_keyboard())

@dp.message_handler(Text(equals="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏üí≥"))
async def cmd_pay(message: types.Message):
    count_sum = 0
    result = await get_pay_target(message.from_user.id)
    if result is False:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω—ã—Ö —Ü–µ–ª–µ–π", reply_markup=kb_add_target_pay())
    else:
        for i in result:
            name, summ, price_user = i
            count_sum += summ
            await message.answer(f"–¶–µ–ª—å: {name}\n–°—É–º–º–∞: {price_user}/{summ}—Ä—É–±\n–û—Å—Ç–∞–ª–æ—Å—å: {summ - price_user}—Ä—É–±",
                                 reply_markup=api_pay())
        await message.answer(f"–û–±—â–∞—è —Å—É–º–º–∞: {count_sum}—Ä—É–±")
        await message.reply("–í–æ—Ç –≤–∞—à–∏ —Ü–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ", reply_markup=kb_add_target_pay())

money = ""
pros = ""

@dp.message_handler(Text(equals="–°–±–æ—Ä–∫–∞ –ü–ö —Å –ø–æ–º–æ—â—å—é AIü§ñ"))
async def cmd_gpt(message: types.Message):
    await message.reply("–ö–∞–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Ç–µ–±–µ —Å–æ–±—Ä–∞—Ç—å –ü–ö?", reply_markup=ai_kb())

@dp.callback_query_handler(text="low_money")
async def call_back_lowmoney(callback: types.CallbackQuery):
    global money
    money = ""
    money += callback.data
    await callback.message.edit_text("–ù–∞ –±–∞–∑–µ –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É?", reply_markup=ai_kb_pros())

@dp.callback_query_handler(text="hard_money")
async def call_back_hardmoney(callback: types.CallbackQuery):
    global money
    money = ""
    money += callback.data
    await callback.message.edit_text("–ù–∞ –±–∞–∑–µ –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É?", reply_markup=ai_kb_pros())

txt1 = (f"–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –±—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞ –±–∞–∑–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ AMD? –ú–Ω–µ –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
        f"–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ä–ø—É—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ."
        f"–¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω—É –∏ –≤—ã—Ç–∞—â–∏ –º–Ω–µ Id –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏."
        f"–ò –µ—â–µ –æ–¥–∏–Ω –Ω—é–∞–Ω—Å –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ."
        f"–ù–∞–ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

txt2 = (f"–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞ –±–∞–∑–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ AMD? –ú–Ω–µ –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:"
        f" –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ä–ø—É—Å, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å 3.5, –∏ ssd, –∞ —Ç–∞–∫–∂–µ –∫—É–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–µ—Å–æ—Ä–∞ –Ω—É –∏ –¥–æ–ø –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ "
        f"–¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω—É –∏ –≤—ã—Ç–∞—â–∏ –º–Ω–µ Id –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏."
        f"–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
        f"–ò –µ—â–µ –æ–¥–∏–Ω –Ω—é–∞–Ω—Å –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ."
        f"–ù–∞–ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

txt3 = (f"–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –±—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞ –±–∞–∑–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ Intel? –ú–Ω–µ –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
        f"–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ä–ø—É—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ."
        f"–¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω—É –∏ –≤—ã—Ç–∞—â–∏ –º–Ω–µ Id –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏."
        f"–ò –µ—â–µ –æ–¥–∏–Ω –Ω—é–∞–Ω—Å –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ."
        f"–ù–∞–ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

txt4 = (f"–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞ –±–∞–∑–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ Intel? –ú–Ω–µ –Ω—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:"
        f" –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ä–ø—É—Å, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å 3.5, –∏ ssd, –∞ —Ç–∞–∫–∂–µ –∫—É–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–µ—Å–æ—Ä–∞ –Ω—É –∏ –¥–æ–ø –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ "
        f"–¢–æ–ª—å–∫–æ –∑–∞–ø—á–∞—Å—Ç–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω—É –∏ –≤—ã—Ç–∞—â–∏ –º–Ω–µ Id –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏."
        f"–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
        f"–ò –µ—â–µ –æ–¥–∏–Ω –Ω—é–∞–Ω—Å –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ."
        f"–ù–∞–ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

count_ai = 0

@dp.callback_query_handler(text="amd")
async def call_back_amd(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, AI —Å–æ–±–∏—Ä–∞–µ—Ç –¥–ª—è –≤–∞—Å –ü–ö", reply_markup=ReplyKeyboardRemove())

    with open("SQL//ebaty.json", encoding="utf-8") as file:
        data = json.load(file)

    global pros
    global money
    pros = ""
    pros += callback.data

    user = ""

    if pros == "amd" and money == "low_money":
        user += txt1
    elif pros == "amd" and money == "hard_money":
        user += txt2
    elif pros == "intel" and money == "low_money":
        user += txt3
    elif pros == "intel" and money == "hard_money":
        user += txt4

    with open("AI//data.txt", encoding="utf-8") as file:
        res = file.read()
    txt = f"""
    {user}
    {res}
    """
    result = get_res_ai(txt)

    count_price = 0

    bim = []

    for i in result:
        for j in data:
            if i == j["Id"]:
                bim.append(
                    {
                        "Id": j["Id"],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": j["–ù–∞–∑–≤–∞–Ω–∏–µ"],
                        "–û–ø–∏—Å–∞–Ω–∏–µ": j["–û–ø–∏—Å–∞–Ω–∏–µ"],
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": j["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"],
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å": j["–°—Ç–æ–∏–º–æ—Å—Ç—å"],
                        "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞": j["–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤": j["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"],
                        "–ö–∞—Ä—Ç–∏–Ω–∫–∏": j["–ö–∞—Ä—Ç–∏–Ω–∫–∏"]
                    }
                )
                # card = (f"{hlink(j.get('–ù–∞–∑–≤–∞–Ω–∏–µ'), j.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
                #         f"{hbold('Id: ')}{j.get('Id')}\n"
                #         f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{j.get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
                #         f"{hbold('–¶–µ–Ω–∞: ')}{j.get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
                #         f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{j.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
                #         f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{j.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n")

                # count_price += j["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

    #             await callback.message.answer(card, parse_mode="HTML", reply_markup=add_korzina())
    #
    # await callback.message.answer(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {count_price}—Ä—É–±.", reply_markup=main_keyboard())

    global count_ai

    with open("AI//get.json", "w", encoding="utf-8") as file:
        json.dump(bim, file, indent=4, ensure_ascii=False)

    with open("AI//get.json", encoding="utf-8") as file:
        opa = json.load(file)

    for i in opa:
        count_price += i["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

    card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

    await callback.message.answer(card, parse_mode="HTML", reply_markup=swipe_ai())
    await callback.message.answer(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {count_price}—Ä—É–±.", reply_markup=main_keyboard())

@dp.callback_query_handler(text="intel")
async def call_back_intel(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, AI —Å–æ–±–∏—Ä–∞–µ—Ç –¥–ª—è –≤–∞—Å –ü–ö", reply_markup=ReplyKeyboardRemove())

    with open("SQL//ebaty.json", encoding="utf-8") as file:
        data = json.load(file)

    global pros
    global money
    pros = ""
    pros += callback.data

    user = ""

    if pros == "amd" and money == "low_money":
        user += txt1
    elif pros == "amd" and money == "hard_money":
        user += txt2
    elif pros == "intel" and money == "low_money":
        user += txt3
    elif pros == "intel" and money == "hard_money":
        user += txt4

    with open("AI//data.txt", encoding="utf-8") as file:
        res = file.read()
    txt = f"""
    {user}
    {res}
    """
    result = get_res_ai(txt)

    count_price = 0

    bim = []

    for i in result:
        for j in data:
            if i == j["Id"]:
                bim.append(
                    {
                        "Id": j["Id"],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": j["–ù–∞–∑–≤–∞–Ω–∏–µ"],
                        "–û–ø–∏—Å–∞–Ω–∏–µ": j["–û–ø–∏—Å–∞–Ω–∏–µ"],
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": j["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"],
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å": j["–°—Ç–æ–∏–º–æ—Å—Ç—å"],
                        "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞": j["–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤": j["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"],
                        "–ö–∞—Ä—Ç–∏–Ω–∫–∏": j["–ö–∞—Ä—Ç–∏–Ω–∫–∏"]
                    }
                )

    global count_ai

    with open("AI//get.json", "w", encoding="utf-8") as file:
        json.dump(bim, file, indent=4, ensure_ascii=False)

    with open("AI//get.json", encoding="utf-8") as file:
        opa = json.load(file)

    for i in opa:
        count_price += i["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

    card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

    await callback.message.answer(card, parse_mode="HTML", reply_markup=swipe_ai())
    await callback.message.answer(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {count_price}—Ä—É–±.", reply_markup=main_keyboard())

@dp.callback_query_handler(text="swipe_one_ai")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_ai
    try:
        with open("AI//get.json", encoding="utf-8") as file:
            opa = json.load(file)

        count_ai = 0

        card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_ai())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="swipe_last_ai")
async def cmd_news_forward(callback: types.CallbackQuery):
    global count_ai
    try:
        with open("AI//get.json", encoding="utf-8") as file:
            opa = json.load(file)

        count_ai = len(opa) - 1

        card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

        await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_ai())
    except:
        await callback.answer("–¢—ã —Ç—É–ø–æ–π?")

@dp.callback_query_handler(text="forward_ai")
async def cmd_news_forward(callback: types.CallbackQuery):
    with open("AI//get.json", encoding="utf-8") as file:
        opa = json.load(file)
    try:
        global count_ai
        if count_ai >= len(opa) - 1:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_ai += 1

            with open("AI//get.json", encoding="utf-8") as file:
                opa = json.load(file)

            card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_ai())
    except:
        pass

@dp.callback_query_handler(text="back_ai")
async def cmd_news_forward(callback: types.CallbackQuery):
    try:
        global count_ai
        if count_ai <= 0:
            await callback.answer("–¢—ã —Ç—É–ø–æ–π?")
        else:
            count_ai -= 1

            with open("AI//get.json", encoding="utf-8") as file:
                opa = json.load(file)

            card = (f"{hlink(opa[count_ai].get('–ù–∞–∑–≤–∞–Ω–∏–µ'), opa[count_ai].get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'))}\n"
            f"{hbold('Id: ')}{opa[count_ai].get('Id')}\n"
            f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ: ')}{opa[count_ai].get('–û–ø–∏—Å–∞–Ω–∏–µ')}\n"
            f"{hbold('–¶–µ–Ω–∞: ')}{opa[count_ai].get('–°—Ç–æ–∏–º–æ—Å—Ç—å')}—Ä—É–±.\n"
            f"{hbold('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ')}{opa[count_ai].get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}\n"
            f"{hbold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ')}{opa[count_ai].get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')}\n"
            f"{hbold(f'{count_ai + 1}/{len(opa)}')}")

            await callback.message.edit_text(card, parse_mode="HTML", reply_markup=swipe_ai())
    except:
        pass

@dp.callback_query_handler(text="close_news_ai")
async def cmd_close_news(callback: types.CallbackQuery):
    await callback.message.delete()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=info_start)